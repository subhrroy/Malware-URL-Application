package com.cisco.security.urllookup.controllers;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cisco.security.urllookup.service.UrlLookupService;
import com.cisco.security.urllookup.service.UserService;

@RestController
@RequestMapping("/v1/urlinfo/")
public class URLLookupController {
	
	@Autowired
	UrlLookupService urlLookupService;
	
	@Autowired
	UserService userService;
	
	protected Logger logger=LoggerFactory.getLogger(URLLookupController.class);
	
	/**
	 * 
	 * @param requestBody
	 * @return
	 */
	@RequestMapping(value = "/get/{url}", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Map<String, Object>> getUrlDetails(HttpServletRequest request, 
			@PathVariable(required = true) String url) {
		
		Map<String, Object> outputMap = new HashMap<>();
		List<String> errorMessages = new ArrayList<>();
		
		if(isValidUser(request)){
			logger.info("Inside GET of Malware URL check");
			try {
				outputMap= urlLookupService.checkUrlValidity(url);
			} catch (Exception e) {
				logger.error("Error getting all endpoints ", e);
				errorMessages.add("Error while getting url from db.");
				outputMap.put("message", errorMessages);
				outputMap.put("Status", "Failed");
				return new ResponseEntity<>(outputMap, HttpStatus.INTERNAL_SERVER_ERROR);
			}
			return new ResponseEntity<>(outputMap, HttpStatus.OK);
		}
		errorMessages.add("Invalid Username/Password provided.");
		outputMap.put("message", errorMessages);
		outputMap.put("Status", "Failed");
		return new ResponseEntity<>(outputMap, HttpStatus.UNAUTHORIZED);
	}


	/**
	 * 
	 * @param request
	 * @param url
	 * @return
	 */
	@RequestMapping(value = "/get", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Map<String, Object>> getUrlDetails2(HttpServletRequest request, 
			@RequestParam(required = true, name="url") String url) {
		
		logger.info("Get2 " + url);
		Map<String, Object> outputMap = new HashMap<>();
		List<String> errorMessages = new ArrayList<>();
		
		try{
			URL urlObject = new URL(url);
			String encodedString = URLEncoder.encode(url, "UTF-8");
			return getUrlDetails(request, encodedString);
		}catch(MalformedURLException | UnsupportedEncodingException mfe){
			logger.error("Invalid URL ", mfe);
			errorMessages.add("Invalid URL in the paramater.");
			outputMap.put("message", errorMessages);
			outputMap.put("Status", "Failed");
			return new ResponseEntity<>(outputMap, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	/**
	 * 
	 * @param requestBody
	 * @return
	 */
	@RequestMapping(value = "/add/{url}", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Map<String, Object>> addBlackListedUrl(HttpServletRequest request, 
			@PathVariable(required = true) String url) {
		
		Map<String, Object> outputMap = new HashMap<>();
		List<String> errorMessages = new ArrayList<>();
		
		if(isValidAdminUser(request)){
			logger.info("Inside ADD of Malware URL");
			try {
				outputMap= urlLookupService.addMalwareURL(url, false);
			} catch (Exception e) {
				logger.error("Error getting all endpoints ", e);
				errorMessages.add("Error while adding url to db.");
				outputMap.put("message", errorMessages);
				outputMap.put("Status", "Failed");
				return new ResponseEntity<>(outputMap, HttpStatus.INTERNAL_SERVER_ERROR);
			}
			return new ResponseEntity<>(outputMap, HttpStatus.OK);
		}
		errorMessages.add("Invalid Username/Password provided.");
		outputMap.put("message", errorMessages);
		outputMap.put("Status", "Failed");
		return new ResponseEntity<>(outputMap, HttpStatus.UNAUTHORIZED);
	}
	
	/**
	 * 
	 * @param request
	 * @param url
	 * @return
	 */
	@RequestMapping(value = "/add", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Map<String, Object>> addBlackListedUrl2(HttpServletRequest request, 
			@RequestParam(required = true, name="url") String url) {
		
		Map<String, Object> outputMap = new HashMap<>();
		List<String> errorMessages = new ArrayList<>();
		
		try{
			logger.info("Add3 " + url);
			URL urlObject = new URL(url);
			String encodedString = URLEncoder.encode(url, "UTF-8");
			return addBlackListedUrl(request, encodedString);
		}catch(MalformedURLException | UnsupportedEncodingException mfe){
			logger.error("Invalid URL ", mfe);
			errorMessages.add("Invalid URL in the paramater.");
			outputMap.put("message", errorMessages);
			outputMap.put("Status", "Failed");
			return new ResponseEntity<>(outputMap, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	/**
	 * 
	 * @param request
	 * @param bodyMap
	 * @return
	 */
	@RequestMapping(value = "/add", method = RequestMethod.POST, consumes="application/json", produces = "application/json")
	public ResponseEntity<Map<String, Object>> addBlackListedUrlPost(HttpServletRequest request, 
			@RequestBody Map<String,String> bodyMap) {
		
		Map<String, Object> outputMap = new HashMap<>();
		List<String> errorMessages = new ArrayList<>();
		
		if(null == bodyMap){
			logger.error("bad Request");
			errorMessages.add("bad Request");
			outputMap.put("message", errorMessages);
			outputMap.put("Status", "Failed");
			return new ResponseEntity<>(outputMap, HttpStatus.BAD_REQUEST);
		}
		
		try{
			String url = bodyMap.get("url");
			logger.info("Add2 " + url);
			URL urlObject = new URL(url);
			String encodedString = URLEncoder.encode(url, "UTF-8");
			return addBlackListedUrl(request, encodedString);
		}catch(MalformedURLException | UnsupportedEncodingException mfe){
			logger.error("Invalid URL ", mfe);
			errorMessages.add("Invalid URL in the paramater.");
			outputMap.put("message", errorMessages);
			outputMap.put("Status", "Failed");
			return new ResponseEntity<>(outputMap, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	private boolean isValidUser(HttpServletRequest request) {
		final String authorization = request.getHeader("Authorization");
		if (authorization != null && authorization.toLowerCase().startsWith("basic")) {
		    // Authorization: Basic base64credentials
		    String base64Credentials = authorization.substring("Basic".length()).trim();
		    byte[] credDecoded = Base64.getDecoder().decode(base64Credentials);
		    String credentials = new String(credDecoded, StandardCharsets.UTF_8);
		    return userService.isValidUser(credentials);
		}
		return false;
	}
	
	private boolean isValidAdminUser(HttpServletRequest request) {
		final String authorization = request.getHeader("Authorization");
		if (authorization != null && authorization.toLowerCase().startsWith("basic")) {
		    // Authorization: Basic base64credentials
		    String base64Credentials = authorization.substring("Basic".length()).trim();
		    byte[] credDecoded = Base64.getDecoder().decode(base64Credentials);
		    String credentials = new String(credDecoded, StandardCharsets.UTF_8);
		    return userService.isValidUserAndAdmin(credentials);
		}
		return false;
	}
}
